package kr.bang.algorithm;

import java.util.Scanner;

public class Subway {
	static int N; // 지하철 역의 수
	static int M; // 목적지 역
	static int[][] subway; // 노선도
	static int answer = 2147483647; // 최소값을 저장해줄 변수
	static int[] answerArr; // 최소경로를 저장해줄 변수
	static int sum = 0; // 현재까지 이동시간 저장해줄 변수
	static int[] stationlist; // 현재까지 경로를 저장해줄 변수
	static int stationNum; // 출력할 역의 개수
	static boolean[] visited; // 이미 방문한 역인지 확인해줄 변수
	public static void travel(int station, int index) {
		if(station==M) {
			if(sum<answer) {
				answer = sum;
				answerArr = stationlist;
				stationNum = index - 1;
			}
			return;
		}
		if(sum>=answer) return;
		for(int i=0; i<N; i++) {
			if(visited[i] || i==station) continue;
			visited[station] = true;
			stationlist[index] = i;
			sum += subway[station][i];
			travel(i, index+1);
			visited[station] = false;
			stationlist[index] = 0;
			sum -= subway[station][i];
		}
		return;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		N = s.nextInt();
		M = s.nextInt();
		visited = new boolean[N];
		answerArr = new int[N];
		stationlist = new int[N];
		stationlist[0] = 1;
		subway = new int[N][N];
		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				subway[i][j] = s.nextInt();
			}
		}
		// DFS를 사용한다. 재귀함수를 사용
		// i, j 배열에서 반복문을 사용해서 i=1부터 n-1까지 진행하는데 열의 번호를 행의 번호에 대입해서 다시 재귀함수를 부른다.
		// 진행 중에 최소값을 넘어버리면 return 한다.
		travel(0, 1);
	}

}
