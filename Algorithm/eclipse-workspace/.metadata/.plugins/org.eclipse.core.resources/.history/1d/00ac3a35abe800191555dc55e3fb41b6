package kr.bang.algorithm;

import java.util.Scanner;

public class Subway {
	static int answer = 2147483647;
	static int[] answerArr;
	static int N;
	static int M;
	static int sum = 0;
	static int[][] subway;
	static boolean[] visited;
	static int[] stationlist;
	public static void travel(int station, int index) {
		for(int i=0; i<N; i++) {
			if(visited[i] || i==station) continue;
			visited[station] = true;
			stationlist[index]
			sum += subway[station][i];
			travel(i, index+1);
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		N = s.nextInt();
		M = s.nextInt();
		visited = new boolean[N];
		answerArr = new int[N];
		stationlist = new int[N];
		stationlist[0] = 1;
		subway = new int[N][N];
		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				subway[i][j] = s.nextInt();
			}
		}
		// DFS를 사용한다. 재귀함수를 사용
		// i, j 배열에서 반복문을 사용해서 i=1부터 n-1까지 진행하는데 열의 번호를 행의 번호에 대입해서 다시 재귀함수를 부른다.
		// 진행 중에 최소값을 넘어버리면 return 한다.
		travel(0, 0);
	}

}
